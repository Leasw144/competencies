//Get GitHub Personal access token from spreadsheet
var sheet = SpreadsheetApp.getActiveSpreadsheet();
var personalAccessToken = readFromCell(sheet.getActiveSheet(), 1, 1);

function testRequests() {
  //Request to GitHub REST API v3
  var repoContent = UrlFetchApp.fetch("https://api.github.com/repos/sendwithus/competencies/contents?access_token=" + personalAccessToken);
  repoContent = JSON.parse(repoContent); //gets content of repo as JS object
  
  var githubFileNames = [];
  
  //Iterate through each file in the repo:
  for (i=0; i<repoContent.length; i++) {
    githubFileNames[i] = repoContent[i].name; //stores name of each GitHub file in array
    //Request data for each file:
    var fileData = UrlFetchApp.fetch(repoContent[i].url + "&access_token=" + personalAccessToken);
    fileData = JSON.parse(fileData);
    var fileContentEncoded = fileData.content;
    var fileContentDecoded = decodeBase64Str(fileContentEncoded);
  }
  
  //Get names of all files in a Drive folder:
  var folder = DriveApp.getFoldersByName('testFolder'); //get folder as object from Drive
  while (folder.hasNext()) {
    var files = folder.next().getFiles(); //get files from folder
    while (files.hasNext()) { //for each file in the folder
      var file = files.next();
      var fileName = file.getName(); //get the file name
      if (fileName != 'TEMPLATE') { //ignore files with name 'TEMPLATES'
        var indexOfNameInGithubFileNames = githubFileNames.indexOf(fileName);
        
        //Checks if Drive file exists in GitHub repo (by file name)
        if (indexOfNameInGithubFileNames != -1) { //indexOf() returns -1 if value does not exist in array
          //The Drive file exists already in the GitHub repo:
            //update file via API request
        }
        else {
          //The Drive file doesn't exists in the GitHub repo:
            //create new branch called "<file-name-no-spaces>-<date>" or "<file-name-no-spaces>-<commit-no.>"
            //create new file in branch
            //Add Drive file content to Github via API request
        }
      }
    }
  }
}

function decodeBase64Str(encodedStr) {
  //This function decodes a string that is encoded in Base 64
  var decodedStrAsByteArray = Utilities.base64Decode(encodedStr); //returns decoded string as a byte array
  var decodedStr = Utilities.newBlob(decodedStrAsByteArray).getDataAsString(); //converts byte array to string
  return decodedStr;
}

function encodeBase64Str(str) {
  //This function takes a string and encodes it in base 64
  var encodedStr = Utilities.base64Encode(str);
  return encodedStr;
}

function readFromCell(sheet, row, col) {
  //THIS FUNCTION WILL NOT GO IN THE FINAL SCRIPT IN GITHUB
  //This function gets the value of a specified cell
  var range = sheet.getRange(row, col);
  var cellValue = range.getDisplayValue(); //gets value of cell as string always, not object if value exists as object
  return cellValue;
}
